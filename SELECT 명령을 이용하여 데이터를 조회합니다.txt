sqlplus scott/tiger

sys/oracle as sysdba

startup

CONN scott/tiger

show user
USER is "SCOTT"

SET sqlprompt "_USER>"

-- 
문법

SELECT [ 컬럼명 또는 표현식 ] FROM [테이블명,뷰 명]

--

-- 모든 컬럼 다 조회하고 싶을 경우 컬럼명 대신 * 써도 된다.

SELECT * FROM emp;

SELECT *
FR
OM emp;

SELECT *
FROM em
p;

SELECT em
pno
FROM emp;

-- 
SQL문은 대소문자 고분을 하지 않고 입력해도 수행 되지만 내부적으로는 대문자와 소문자는 서로 다른 SQL로 구분이 됨. 튜닝 부분에서 아주 강조되는 부분
문장의 마지막 부분에는 반드시 ;(세미콜론) 입력해야함.
--

-- 테이블에 어떤 컬럼이 있는지 조회하는 명령어 DESC, DESCribe의 약자

DESC dept;

SELECT * FROM tab;

SELECT empno, ename
FROM emp;

-- 표현식(Expression) 컬럼 이름 외에 출력하기 원하는 내용 의미, SELECT 구문 뒤에 ''(작은따옴표)로 묶어서 사용

SELECT * FROM professor;

SELECT name, 'good morning~~!' "Good Morning"
FROM professor;

-- 'good morning~~!' 부분을 표현식 또는 리터럴(literal) 상수(문자), 보통 리터럴이라는 용어를 많이 씀

SELECT dname,', it''s deptno : ', deptno "DNAME AND DEPTNO"
FROM dept;

SELECT dname, q'[, it's deptno : ]', deptno "DNAME AND DEPTNO"
FROM dept;

-- 리터럴 안에 작은따옴표가 있을 때 작은따옴표 1개 출력하려면 2개를 사용해야 한다 위의 두가지 방법 중 하나 사용하면 된다.

SELECT profno, name, pay
FROM professor ;

SELECT profno "Prof'NO" , name AS "Prof's NAME", pay Prof_Pay
FROM professor;

SELECT deptno FROM emp;

SELECT DISTINCT deptno
FROM emp;

SELECT job, ename
FROM emp
ORDER BY 1 , 2;

SELECT DISTINCT job, ename
FROM emp
ORDER BY 1, 2;

SELECT job, DISTINCT ename
FROM emp
ORDER BY 1, 2;

-- DISTINCT 키워드는 1개의 컬럼에만 적어도 모든 컬럼에 적용됨 이로 인해 성능 저하가 발생 할 수 있음

SELECT ename, job FROM emp;

--
연결(합성) 연산자 ||
오라클에서 1개 컬럼으로 인식
백업/복구 관련 작업이나 관리 및 튜닝 작업할 때 아주 많이 사용
--

SELECT ename || job FROM emp;

SELECT ename||' ''s job is '|| job "NAME AND JOB"
FROM emp;

-- 연습문제 1 --

SELECT * FROM STUDENT;

SELECT NAME||' ''s ID : '||ID||', WEIGHT is '||WEIGHT||'Kg' "ID AND WEIGHT"
FROM STUDENT;

-- 연습문제 2 --

SELECT * FROM EMP;

SELECT ENAME||'('||JOB||') , '||ENAME||''''||JOB||'''' "NAME AND JOB"
FROM EMP;

-- 연습문제 3 --

SELECT * FROM EMP;

SELECT ENAME||'''s sal is $'||SAL "Name and Sal"
FROM emp;

--
문법
SELECT [ Column or Expression ]
FROM [ Table or View ]
WHERE 원하는 조건;
--

SELECT empno, ename
FROM emp
WHERE empno = 7900;

SELECT ename, sal
FROM emp
WHERE sal < 1000 ;

SELECT empno, ename, sal
FROM emp
WHERE ename=SMITH;

SELECT empno, ename, sal
FROM emp
WHERE ename='SMITH';

-- 문자의 경우 대소문자도 꼭 구분해서 정확히 적어야 함

SELECT empno, ename, sal
FROM emp
WHERE ename='smith';

SELECT ename, hiredate
FROM emp
WHERE ename = 'SMITH';

SELECT empno, ename, sal
FROM emp
WHERE hiredate = '80/12/17';

SELECT empno, ename, sal
FROM emp
WHERE hiredate = 80/12/17;

-- 날짜를 조회할 경우 날짜 부분에 작은따옴표를 반드시 사용해야함

--
검색 조건 쓸 때
숫자 외에는 꼭 작은따옴표를 사용
문자는 대소문자 구분, 날짜는 대소문자 구분이 없다.
--

SELECT ename, sal
FROM emp
WHERE deptno = 10;

SELECT ename, sal, sal+100
FROM emp
WHERE deptno = 10;

SELECT ename, sal, sal*1.1
FROM emp
WHERE deptno = 10;

SELECT empno, ename, sal
FROM emp
WHERE sal >= 4000;

SELECT empno, ename, sal
FROM emp
WHERE ename >= 'W' ;

SELECT ename, hiredate
FROM emp;

SELECT ename, hiredate
FROM emp
WHERE hiredate >= '81/12/25';

SELECT empno, ename, sal
FROM emp
WHERE sal BETWEEN 2000 AND 3000;

--
BETWEEN 연산자 주의사항
1. 작은 값을 앞에, 큰 값을 뒤에 쓴다
2. 두 값을 모두 포함하는 결과 출력
--

SELECT empno, ename, sal
FROM emp
WHERE sal >= 2000
AND sal <= 3000 ;

--
출력 결과는 BETWEEN과 동일, 속도 면에서 이게 더 빠름
BETWEEN 대신 위의 방법을 사용
--

SELECT ename FROM emp
ORDER BY ename;

SELECT ename FROM emp
WHERE ename BETWEEN 'JAMES' AND 'MARTIN'
ORDER BY ename;

SELECT empno, ename, deptno
FROM emp
WHERE deptno IN (10,20);

---

LIKE와 함께 사용되는 기호 '%', '_'
%: 글자 수 제한 없음(0개 포함)
_(Underscore): 글자 수 한 글자

---

